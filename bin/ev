#!/bin/bash

root="`dirname $0`/.."

function __ev_status ()
{
    echo "status"
}

function __ev_repo_file ()
{
    echo $root/etc/.ev/global/repo
}

function __ev_init ()
{
    if [ -d .ev ]; then
        echo "Re-initializing local ev in $PWD/.ev"
        rm -rf ".ev"
    else
        echo "Initializing local ev in $PWD/.ev"
    fi

    cp -r $root/etc/.ev/local .ev
}

function __ev_list ()
{
    local repo=`__ev_global_repo`/evs
    echo "default"
    for f in ${repo}/*; do
        if [ -d "$f" ]; then
            echo `basename "$f"`
        fi
    done
}

function __ev_set ()
{
    local new="$1"
    if [ -z "$new" ]; then
        cat .ev/active
    else
        local list=`__ev_list`
        local arr_list=( "$list" )
        for l in $arr_list; do
            if [ "$l" == "$new" ]; then
                echo "$new" > .ev/active
                return 0
            fi
        done
        echo "error: ev '$new' not found, try one of"
        __ev_list
    fi
}

function __ev_global_repo ()
{
    local new="$1"
    if [ -z "$new" ]; then
        cat `__ev_repo_file`
    else
        echo "$new" > `__ev_repo_file`
    fi
}

function __ev_global_build ()
{
    echo "TODO"
}

function __ev_global ()
{
    local cmd="$1"
    case $cmd in
         repo)  __ev_global_repo "$2" ;;
         build) __ev_global_build "$2" ;;
         *)     __ev_usage "global $cmd" ;;   
    esac
}

function __ev_usage ()
{
    if [ "$1" != "" ]; then
        echo "unknown command '$1'"
        echo ""
    fi
    echo "Erlang Versions - manage concurrent versions of Erlang/OTP"
    echo "usage: ev <command> [<args>]"
    echo 
    echo "local control - 'ev <command>'"
    echo "    status     Print status report"
    echo "    init       Mark current directory to be managed by ev"
    echo "    list       Print local available versions"
    echo "    set        Activate specific Erlang/OTP version"
    echo 
    echo "global control - 'ev global <arg>'"
    echo "    repo       Configure path to Erlang/OTP repository"
    echo "    build      Build a tag and add to the repository"
}

command="$1"
case $command in 
    status) __ev_status ;;
    init)   __ev_init ;;
    list)   __ev_list ;;
    set)    __ev_set "$2" ;;
    global) __ev_global "$2" "$3" ;;
    *)      __ev_usage "$1" ;;
esac
